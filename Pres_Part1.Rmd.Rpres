KP R Intro Training, Part I
========================================================
author: Nerissa Nance
date: 3/12/2019
autosize: true

Logging onto R Studio Server
========================================================
As you did in part 0, go to the following website:
<br/><br/>
> **dords-rtraining.kaiser.org:8787/**  

<br/><br/>
and log in with the following credentials:
<br/>

>username: **train2**  
>  
>password: **dstrain2**


Overall learning objectives
========================================================
By the end of this training, students will:  
<br/>
-  understand and leverage the R Studio interface 
-  recognize and utilize different data types and data structures
-  identify different types of missing data in R
-  access data from R 
-  merge and perform some basic data manipulations
-  visualize data
<br/><br/><br/>


 

Part 1 objectives
========================================================

- Utilizing files in RStudio, creating an Rmd file, download, install packages and read them into your library, and read key documentation
- Reviewing different data types, naming/calling syntax, subsetting syntax and data structures
- Loading a csv file and SAS file into the environment 
 
 
Reference chapters
========================================================

 Relevant chapters in [R for Data Science](https://r4ds.had.co.nz/):
 
 - Chapters 1 Intro
 - Chapter 27 R Markdown
 - Chapter 20 Vectors



RStudio interface (in review)
========================================================

As discussed in Part 0, R Markdown files combine R scripts with simple text formatting, which makes reports  (PDFs or HTMLs) easy to generate with embedded R output. 

Open the file "KP_R_Intro_Part1.Rmd", found under the "files" tab in the bottom right window of the RStudio interface. That's an example of an Rmd File. Navigate to line ~50, under the heading "R Studio Interface". 



Basic R markdown file
========================================================
File -> New -> R Markdown

To write R code we need to start an R block with three backticks followed by r in braces (squiggly brackets - { and }). We can write commands inside of those brackets to change settings.

You can save the PDF version be clicking [here](https://www.rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf).

![cheatsheet](https://jules32.github.io/rmarkdown-website-tutorial/images/Rmd_cheatsheet.png)

Challenge
========================================================
In the new markdown file you opened:

* Create a header line called "R Training Day 1", with size 1 (aka "header 1").
* Write this equation in the notes area: Area = pi * r^2
* In the first chunk of code, write an equation (eg. 2 + 2)
* Compile as html.





Variable classes
========================================================
Each variable in R has a `class` that summarizes the type of the data stored within the object. We will talk more about data types below.

> NOTE! "numeric" is the default data type for numbers in R:

```{r}
# this is numeric (NOT integer) data type!
class(numeric_object) 
# character type
class(welcome_object) 

```

Removing variables (`rm`)
========================================================
We remove individual variables from our environment with `rm()`. For example, to remove `numeric_object`, we type:
```{r}
rm(numeric_object)
ls()
```
See how `numeric_object` disappeared from our global environment?



Removing variables (`rm`)
========================================================
We can also wipe the entire environment with `rm(list = ls())` (or, click the broom icon in the upper right "global environment" pane)
```{r}
rm(list = ls()) 
ls()
```
Now, all objects are gone from our global environment.

Vignettes
========================================================
Double question marks ?? will lead you to coding walkthroughs called "vignettes". These usually come with preloaded data and examples:  
```{r, eval=FALSE}
??psych
```
When all else fails, Google it!


Atomic data types in R
========================================================
Numeric, character, and logical (aka "boolean") data types all exist at the `atomic level`. 

Normally this means that they cannot be broken down any further and are the raw inputs for functions in R. Other R variables are frequently built upon these atomic types.

![image](https://i2.wp.com/opensourceforu.com/wp-content/uploads/2017/04/Atom-editor.jpg?resize=640%2C337)

Numeric data type
========================================================
Numeric data are numbers and integers. You may also hear numeric data referred to as `float` or `double` data types. By default, R stores everything as `doubles` (64 bit floating point numbers) which makes R very memory hungry. 

Define an object called `num` and then check its class (~line 253 in your .Rmd):
```{r}
num <- 2 * pi

class(num)
```


mathematical operators
========================================================
Standard mathematical operators apply to the creation of numeric data (line ~262 of .Rmd):

```{r}
5 + 2  
5 - 2  
5 * 2  
5 ^ 2  

```

Character data type
========================================================
Character (aka string or text) data are always contained within quotation marks `" "`. Character handling in R is fairly close to character handling in a Unix terminal.  

Let's create an object called `char` and define it with some character data. Then, check its class:
```{r}
char <- "This is character data"
char
class(char)
```



Logical type  
========================================================
Logical (boolean) data are dichotomous TRUE/FALSE values. R internally stores `FALSE` as 0 and `TRUE` as 1. Define a logical object:
```{r}
bool_object <- TRUE
bool_object
class(bool_object)
```
We recommend to always spell out `TRUE` and `FALSE` instead of abbreviating them `T` and `F` which might be mistaken for previously defined variables.


Logical type properties 
========================================================
Note that logical data also take on numeric properties. Remember that `TRUE` is stored as the numeral 1 and `FALSE` is stored as 0. 
```{r}
bool_object + 1
TRUE - TRUE
TRUE + FALSE
FALSE - TRUE
```

Logical tests  
========================================================
Logical tests are helpful in R if you want to check for equivalence. Logical tests compare two objects and return a logical output. This is useful for removing missing data and subsetting (you will learn more about this in Part 2). Note the use of the double equals `==` sign. 

```{r, eval=FALSE}
?"=="
?"&"
?"|"
?"!"
```
```{r}
TRUE == TRUE # is equivalent
FALSE == FALSE
TRUE == FALSE
TRUE & TRUE   # and 
TRUE | FALSE  # or
TRUE != FALSE  # not
TRUE > FALSE # greater than
FALSE >= TRUE # greater than or equal to
```


Challenge 1
========================================================
Now take a moment to complete "challenge 1" (~line 326) in your .Rmd file. 
 



Data testing and type coercion (`is.type` and `as.type`)
========================================================
"Type coercion" refers to changing the data from one type to another. You can change data types with `as.` and then the data type to which you wish to convert.
 

Type        | Test          | Conversion
----------- | ------------- | ----------
character   | is.character  | as.character
complex     | is.complex    | as.complex
double      | is.double     | as.double
expression  | is.expression | as.expression
integer     | is.integer    | as.integer
list        | is.list       | as.list
logical     | is.logical    | as.logical
numeric     | is.numeric    | as.numeric
single      | is.single     | as.single
raw         | is.raw        | as.raw


Type coercion example (`as.numeric`)  
========================================================
```{r}
# Create some character data
char_data <- "9"
class(char_data)

# Coerce this character data to numeric data type
as.numeric(char_data)
class(char_data)
```

What happened here? Why did `char_data` not change classes? (hint: we did not overwrite the object!)


Type coercion example (`as.numeric`)  
========================================================
```{r}
char_data2 <- as.numeric(char_data)
class(char_data2)
char_data2
```
 
Challenge 2
========================================================
Now take a moment to complete "challenge 2" (~line 422) in your .Rmd file. 



Data structures
========================================================
There are several kinds of data structures in R. Data structures are collections of data objects (e.g., numeric, character, and logical vectors, lists, and matrices) that work together. These four are the most common:  

1. vector  
2. list  
3. matrix  
4. dataframe  


Vectors
========================================================
A **VECTOR** is an ordered group of the same kind of data. "Ordered" means that their position matters. Vectors are one-dimensional and homogenous, and are thus referred to by their type (e.g., character vector, numeric vector, logical vector).  

Create a numeric vector by combining/concatenating elements with `c()`  
```{r}
numeric_vector <- c(3, 5, 6, 5, 3)
numeric_vector
```
This numeric vector contains five elements.  


Indexing vectors
========================================================
You can index a vector using square brackets (more on this in the subsetting section of Part 2). For example, to see what value lives in the third position of the object `numeric_vector`, you could type: 
```{r}
numeric_vector[3]
```

You can also add items to a vector using `c()` and a comma `,` (as long as it is the same data type)
```{r}
numeric_vector2 <- c(numeric_vector, 78)
numeric_vector2
```



Generating random vectors (`seq`)
========================================================
You might need to create vectors that are sequences of numbers. You can do this via `seq`. Here we specify a vector from zero to the `length` of our object `logical_vector2` (eight). The argument `by = 2` tells R that we want only the even numbers!
```{r, eval=FALSE}
?length
logical_vector2
length(logical_vector2)

seq(from=0,to=length(logical_vector2),by=2)
```

Sequences
========================================================
R also gives you a shorthand operator for creating sequences in whole number increments of 1. This is the colon symbol `:`
```{r seq}
0:8

sequence_object <- 28:36
sequence_object 
logical_vector <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
0:length(logical_vector)
```

set.seed    
========================================================
You can also sample random groups of numbers. Use `set.seed()` to ensure that we all always get the same random draws from the parent universe, even on different machines
 
Set the seed, and then choose our values:
```{r}
set.seed(2346)
# 20 random samples from uniform distribution between the numbers 3 and 7
uniform <- runif(20, 3, 7) 
uniform
```

rnorm
========================================================
20 random samples from the normal distribution with a mean of 0 and standard deviation of 1:
```{r}
normal <- rnorm(20, 0, 1) 
normal

# 20 random samples from between the numbers 5 and 10. Note that `replace=TRUE` signifies that it is OK to reuse numbers already selected.
integer <- sample(5:10, 20, replace = TRUE) 
integer

character <- sample(c("Cat", "Dog", "Pig"), 20, replace = TRUE) # 20 random samples of character data
character


```

List
========================================================
A **LIST** is an ordered group of data that are not of the same type. Lists are heterogenous. Instead of using `c()` like in vector creation, use `list()` to create a list:
```{r, eval=FALSE}
 

list1 <- list(TRUE, "one", 1) # include three kinds of data: logical, character, and integer
list1
class(list1)
```

Lists are simple containers and are not additive or multiplicative like vectors and matrices are:
```{r, eval=FALSE}
list1 * list(FALSE, "zero", 0) # Error
```

Matrix  
========================================================
**MATRICES** are homogenous like vectors. They are tables comprised of data all of the same type. Matrices are organized into rows and columns. 

Use `matrix()` to create a matrix

We can also specify how we want the matrix to be organized using the `nrow` and `ncol` arguments:
```{r}
matrix1 <- matrix(1:12, nrow = 4, ncol = 3) # this makes a 4 x 3 matrix
matrix1
class(matrix1)
```
We can also coerce a vector to a matrix, because a vector is comprised of homogenous data of the same kind, just like a matrix is:
```{r}
# Create a numeric vector from 1 to 20
vec1 <- c(1:20)
vec1
class(vec1)

# Coerce this vector to a matrix with 10 rows and 2 columns:
matrix2 <- matrix(vec1, ncol=2)
matrix2
class(matrix2)
```



Data frame 
========================================================
_**It is worth emphasizing the importance of data frames in R!**_ Inside R, a **DATA FRAME** is a list of equal-length vectors. These vectors can be of different types. Data frames are thus heterogenous like lists.  

Data frames are equivalent to datasets in SAS or other software. We will work mostly with dataframes for the rest of the course. 


Creating a data frame
========================================================
Let's create a dataframe called `animals` using the vectors we already created:

We do this using `data.frame()`

```{r}
animals <- data.frame(uniform, normal, integer, character, stringsAsFactors = FALSE)
```
NOTE: `stringsAsFactors=FALSE` means that R will NOT try to interpret character data as factor type.  

Viewing data frames
========================================================
Take a peek at the `animals` data frame to see what it looks like:
```{r}
head(animals)
```

Column names
========================================================
We can change the names of the columns by passing into it a vector with our desired names
```{r}
# Create a vector called `new_df_names` with the new column names and pass this vector into `colnames()`
colnames(animals) <- c("Weight", "Progress", "Height", "Type")
head(animals)
```

Viewing dataframe structure
========================================================
We can check the structure of our data frame via `str()`
```{r, eval=FALSE}
 
str(animals)
```
Here, we can see that a data frame is just a list of equal-length vectors! For readability purposes, `str()` displays columns from top to bottom, while the data are displayed left to right. 


More about your df
========================================================
How to learn more about your data frame: 

```{r}
# View the dimensions (nrow x ncol) of the data frame:
dim(animals) 

# View column names:
colnames(animals)
 
```


Factor data type  
========================================================
Factor data are categorical types used to make comparisons between other data. Factors group the data by their "levels" (the different categorical groups within a factor).  
```{r}
 
 class(animals$Type)
animals$Type <- factor(animals$Type)
  class(animals$Type) 

```

Factor data type  
========================================================
Notice that R stores factors internally as integers and uses the character strings as labels. Also notice that by default R orders factors alphabetically and returns them when we call the "Type" vector.
```{r}
animals$Type
levels(animals$Type)
```


Changing factor "levels"
========================================================
Each animal type (Cat, Dog, and Pig) within the factor `animals$Type` vector are the factor levels. 

If we want to change how R stores the factor levels, we can specify their levels using the `levels()` argument. For example:
```{r}

# What if we want to change the factor level sort to Levels: Dog Pig Cat?
animals$Type <- factor(animals$Type, levels = c("Dog", "Pig", "Cat"))

# Now when we call animals$Name, we can see that the levels have changed
animals$Type 
```



Importing and exporting csv data files using `read.csv` and `write.csv`
========================================================
One way to import and export data is using the base r commands `read.csv` and `write.csv`.

Check first where your working directory is by typing:
```{r}
getwd()
```
(note: since we're using R projects, you should already know where your wd is, because it's set up automatically).


Importing and exporting csv data files using `read.csv` and `write.csv`
========================================================

You can import data using the read.csv command. Take a moment to look at the help file for syntax tips by typing `?read.csv` into your console.

```{r}
df.who <- read.csv("./data/who_suicide_statistics.csv",  header = TRUE,  stringsAsFactors = FALSE, na.strings = " ")

```
Notice that `stringsAsFactors = FALSE`. If set to `TRUE`, R will try to guess which **character** vectors should automatically be converted to factors...not ideal, as R is not great at guessing!

Importing and exporting with the Rio package
========================================================

Using base R is fine, but to use it, you need to specify a different extension each time, and sometimes download additional packages depending on the data you have (eg. SAS datasets).

The Rio package simplifies importing/exporting by putting all data-specific import tools under one umbrella (popularly known as the "swiss army knife" of data importing and exporting)
 See [this helpful rio documentation as well](https://cran.r-project.org/web/packages/rio/vignettes/rio.html). 
 

```{r}
library(rio)

df.who <- import("./data/whostats_suicide.sas7bdat")
 dim(df.who)
 
 
```
 

Challenge 3
========================================================

Now take a moment to complete "challenge 3" (~line 718) in your .Rmd file. 



Subsetting in base R using `$`
========================================================
Efficiently subsetting your data will save you time and stress. Fortunately, there are several different ways to subset data in base R.We will review more in Part 2, but one important way is using the`$` operator, which will extract only a single vector/column within the data frame. You was this in some of the previous code already. Here is another example:

```{r}
#Returns only the "age" vector from the `df.pid` data frame.
head(animals$Type) 

```
 

Summarizing data 
========================================================

We'll review summarization in more detail in part 2, but take a moment to look at the data you imported. You can use the `hist()` command to do a histogram and the `summary()` command to look at summary statistics. For example:

```{r}
names(df.who)

class(df.who$suicides_no)
#first, make sure it is numeric!
df.who$suic_no_num <- as.numeric(df.who$suicides_no)

summary(df.who$suic_no_num)

```

Visualize data 
========================================================
We'll review visualization in more detail in part 2, but let's look at an example of plotting using the base r `hist()` function:
```{r}
hist(df.who$suic_no_num)
```

Challenge 4 Homework (optional)
========================================================

swirl is a package that helps you learn R by using R. Visit the [swirl](http://swirlstats.com/) homepage to learn more.

```{r, eval=FALSE}
library(swirl)
swirl()
# follow the instructions until you can select number 1 "R Programming: The basics of programming in R"
```

> NOTE: type `bye()` to exist swirl. 



Acknowledgements
========================================================
- [Wickham H. 2014. Advanced R](http://adv-r.had.co.nz/)  
- [Lander J. 2013. R for everyone: Advanced analytics and graphics](http://www.jaredlander.com/r-for-everyone/)  
- [Matloff N. 2011. The art of R programming: A tour of statistical software design](https://www.nostarch.com/artofr.htm)  

A lot of the source material for this training came from D-lab training materials authored by D-Lab staff. The original content can be accessed here: [https://github.com/dlab-berkeley/R-Fundamentals]
D-Lab works with Berkeley faculty, research staff, and students to advance data-intensive social science and humanities research. They're really cool, check them out!
 [D-Lab Calendar](http://dlab.berkeley.edu/calendar-node-field-date)  
 [D-lab Working Groups](http://dlab.berkeley.edu/working-groups)  
Some of this also came from Chris Kennedy's "Concise R" series, accessed [here](https://github.com/ck37/concise-r)
